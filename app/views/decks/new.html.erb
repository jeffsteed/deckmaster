<% provide(:title, "Decks") %>
<div class="row">
  <div class="col-md-4 col-md-offset-4">
    <h1>Create New Deck</h1>
  </div>
  <div class="col-md-2">
    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#save" id="saveDeck">Save</button>
  </div>
</div>


<div class="row">
  <div class="col-md-12" id="cardDropZone">
    <h1 id="dragHere">Drag cards here</h1>
  </div>
</div>
<h2 id="expandView"><em>expand view</em> <span class="glyphicon glyphicon-zoom-in"></span></h2>

<div class="modal fade" id="save" tabindex="-1" role="dialog">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title">Save Deck</h4>
      </div>
      <div class="modal-body col-md-10 col-md-offset-1">
        <input type="text" class="form-control" value="" placeholder="Name your deck">
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary">Save Deck</button>
      </div>
    </div><!-- /.modal-content -->
  </div><!-- /.modal-dialog -->
</div><!-- /.modal -->


<div class="carousel slide" data-ride="carousel" id="card-carousel">
  <!-- Indicators -->
  <!-- <ol class="carousel-indicators" id="indicators">

  </ol> -->

  <!-- Wrapper for sliders -->
  <div class="carousel-inner" role="listbox" id="carousel-wrapper">

  </div>

  <!-- Controls -->
  <a class="left carousel-control" href="#card-carousel" role="button" data-slide="prev">
    <span class="glyphicon glyphicon-chevron-left" aria-hidden="true"></span>
    <span class="sr-only">Previous</span>
  </a>
  <a class="right carousel-control" href="#card-carousel" role="button" data-slide="next">
    <span class="glyphicon glyphicon-chevron-right" aria-hidden="true"></span>
    <span class="sr-only">Next</span>
  </a>
</div>
<!-- <img class="card" src="http://archive.wizards.com/mtg/images/daily/mm/mm28_manaSymbols.jpg"/>
<div class="card test">

</div> -->


<script type="text/javascript">

  var getSet = function(page) {
    var response;

    var getResponse = function(data) {
      response = data;
    }
    var xhr = new XMLHttpRequest();
    xhr.open("get", "https://api.deckbrew.com/mtg/cards?set=BFZ&page=" + page, false);
    xhr.onload = function() {
      if (xhr.readyState != XMLHttpRequest.DONE) {
        return;
      }
      // console.log(xhr.status);
      if (xhr.status == 200) {
        var data = JSON.parse(xhr.responseText);
        getResponse(data);
      }
    };
    xhr.send(null);

    return response;
  };
  //
  // var createIndicators = function(response) {
  //   var indicators = document.getElementById('indicators');
  //   for (var i = 0; i < response.length; i+=5) {
  //     var li = document.createElement('li');
  //     li.setAttribute("data-target", "#card-carousel");
  //     li.setAttribute("data-slide-to", i);
  //     if (i == 0) {
  //       li.classList.add("active");
  //     }
  //     indicators.appendChild(li);
  //   }
  // };


  var createItems = function(pages) {
    var wrapper = document.getElementById('carousel-wrapper');

    var count = 0;
    for (var i = 0; i < pages; i++) {
      var pageCount = 0;
      var response = getSet(i);
      // console.log(response);

      for (var j = 0; j < response.length; j+=5) {
        var item = document.createElement('div');
        item.classList.add("item");
        if (count == 0) {
          item.classList.add("active");
        }
        var inc = 0;
        while (inc < 5 && pageCount < response.length) {
          var img = document.createElement('img');
          // console.log(count);
          var url = response[(pageCount).toString()]["editions"][0]["image_url"];
          img.src = url;
          img.alt = response[(pageCount).toString()]["name"];
          img.style.display = "inline";
          img.classList.add("card");
          img.style.zIndex = 999;
          img.addEventListener("dragstart", function() {
            console.log("A card image has been clicked" + this.alt);
          });
          item.appendChild(img);
          inc++;
          count++;
          pageCount++;
        }
        wrapper.appendChild(item);
      }

    }

  };

  function expandIt() {
    var view = document.getElementById('cardDropZone');
    view.style.height = "100%";
    expand.innerHTML = "collapse <span class='glyphicon glyphicon-zoom-out'></span>";
    expanded = true;
  }

  function collapseIt() {
    var view = document.getElementById('cardDropZone');
    view.style.height = "400px";
    expand.innerHTML = "expand view <span class='glyphicon glyphicon-zoom-in'></span>";
    document.getElementById('cardDropZone').scrollTop = 0;
    window.scroll(0,0);
    expanded = false;
  }

  var expand = document.getElementById('expandView');
  var expanded = false;
  expand.addEventListener("click", function() {
    if (expanded) {
      collapseIt();
    } else {
      expandIt();
    }
  });



  window.onload = function() {

    function getPosition(parentElement) {
      var x = 0, y = 0;
      while (parentElement) {
        x += (parentElement.offsetLeft - parentElement.scrollLeft + parentElement.clientLeft);
        y += (parentElement.offsetTop - parentElement.scrollTop + parentElement.clientTop);
        parentElement = parentElement.offsetParent;
      }
      return { x: x, y: y };
    }

    createItems(3);

    $(".card").draggable({
      cursor: "move",
      grid: [10, 10],
      helper: "clone",
      containment: "window",
      zIndex: 100
    });

    var newDeck = {};

    $("#cardDropZone").droppable({
      accept: ".card",
      drop: function(event, ui) {
        var droppedItem = $(ui.draggable).clone();
        var drags = document.getElementById('dragHere');
        if (drags) {
            drags.remove();
        }
        $(this).append(droppedItem);
      }
    });

    var cards = document.getElementsByClassName("card");
    // console.log(cards);
    for (var i = 0; i < cards.length; i++) {
      cards[i].addEventListener("click", function() {
        var position = getPosition(this);
        console.log(position["x"] + ", " + position["y"]);
      });
    }
  };
</script>
